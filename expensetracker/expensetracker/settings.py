"""
Django settings for expensetracker project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

# from django.core.management.utils import get_random_secret_key
import os
from pathlib import Path
from decouple import config
from datetime import timedelta

dev_mode = config('DEVELOPMENT')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# print(get_random_secret_key()) # Generate new secret periodically
SECRET_KEY = config('SECRET_KEY')
print(type(SECRET_KEY), " settings")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default="False", cast=bool)

ALLOWED_HOSTS = ['*'] if DEBUG else ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework_simplejwt",
    "corsheaders",
    "rest_framework",
    "Users",
    "Expenses",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware", # CORS
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Enable CORS if your frontend is on a different domain

CORS_ORIGIN_ALLOW_ALL = True # CORS
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',  # The origin of your frontend
]
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "DELETE", "PATCH"]
CORS_ALLOW_CREDENTIALS = True


# Enable Django's built-in sessions
# SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"

# # Set your desired session cookie name (optional)
# SESSION_COOKIE_NAME = "jwt"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Adjust as needed
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(minutes=6),
    'SLIDING_TOKEN_LIFETIME': timedelta(days=2),
    'SLIDING_TOKEN_REFRESH_TIMEOUT_LIFETIME': timedelta(days=7),
}

# SIMPLE_JWT = {
#   'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
#   'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
#   'ROTATE_REFRESH_TOKENS': False,
#   'BLACKLIST_AFTER_ROTATION': True,
#   'UPDATE_LAST_LOGIN': False,

#   'ALGORITHM': 'HS256',
#   'SIGNING_KEY': config('SECRET_KEY'),
#   'VERIFYING_KEY': None,
#   'AUDIENCE': None,
#   'ISSUER': None,

#   'AUTH_HEADER_TYPES': ('Bearer',),
#   'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
#   'USER_ID_FIELD': 'id',
#   'USER_ID_CLAIM': 'user_id',
#   'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

#   'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
#   'TOKEN_TYPE_CLAIM': 'token_type',

#   'JTI_CLAIM': 'jti',

#   'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
#   'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
#   'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),

#   # custom
#   'AUTH_COOKIE': 'access_token',  # Cookie name. Enables cookies if value is set.
#   'AUTH_COOKIE_DOMAIN': None,     # A string like "example.com", or None for standard domain cookie.
#   'AUTH_COOKIE_SECURE': False,    # Whether the auth cookies should be secure (https:// only).
#   'AUTH_COOKIE_HTTP_ONLY' : True, # Http only cookie flag.It's not fetch by javascript.
#   'AUTH_COOKIE_PATH': '/',        # The path of the auth cookie.
#   'AUTH_COOKIE_SAMESITE': 'Lax',  # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag.
# }



ROOT_URLCONF = "expensetracker.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "expensetracker.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
} if dev_mode else {
        'ENGINE': config('DB_ENGINE'),
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOSTNAME'),
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_DIR = os.path.join(BASE_DIR, "ExpenseMedia/")
MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = "/ExpenseMedia/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = config('EMAIL_USE_TLS')